using Stump.Core.IO;
using Stump.Core.Reflection;
using Stump.DofusProtocol.Classes;
using Stump.DofusProtocol.D2oClasses;
using Stump.DofusProtocol.D2oClasses.Tools.D2o;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Database.I18n;

namespace Stump.Server.WorldServer.Database.Challenges {
    [D2OClass("Challenge", "com.ankamagames.dofus.datacenter.challenges"), TableName("challenges")]
    public class ChallengeRecord : IAutoGeneratedRecord, ISaveIntercepter, IAssignedByD2O {
        private string m_description;
        // FIELDS
        private string m_name;
        private string _incompatibleChallengesCSV;
        private uint[] _incompatibleChallenges;

        // PROPERTIES
        [PrimaryKey("Id", false)]
        public int Id { get; set; }

        public uint NameId { get; set; }

        public string Name {
            get {
                if (m_name == null) {
                    m_name = Singleton<TextManager>.Instance.GetText(NameId);
                }
                return m_name;
            }
        }

        public uint DescriptionId { get; set; }

        public string Description => m_description ?? (m_description = Singleton<TextManager>.Instance.GetText(DescriptionId));

        public bool Hidden { get; set; }

        public int MinBonus { get; set; }

        public int MaxBonus { get; set; }

        public bool DareAvailable { get; set; }

        public string IncompatibleChallengesCSV
        {
            get => _incompatibleChallengesCSV;
            set
            {
                _incompatibleChallengesCSV = value;
                _incompatibleChallenges = value.FromCSV<uint>(",");
            }
        }

        [Ignore]
        public uint[] IncompatibleChallenges
        {
            get => _incompatibleChallenges;
            set
            {
                _incompatibleChallenges = value;
                _incompatibleChallengesCSV = value.ToCSV(",");
            }
        }

        public void AssignFields(object d2oObject) {
            var challenge = (Challenge) d2oObject;
            Id = challenge.id;
            NameId = challenge.nameId;
            DescriptionId = challenge.descriptionId;
            DareAvailable = challenge.dareAvailable;
            IncompatibleChallenges = challenge.incompatibleChallenges.ToArray();
        }

        // CONSTRUCTORS

        // METHODS
        public void BeforeSave(bool insert)
        {
            _incompatibleChallengesCSV = _incompatibleChallenges.ToCSV(",");
        }
    }
}