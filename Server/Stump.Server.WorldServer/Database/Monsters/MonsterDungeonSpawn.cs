using System.Collections.Generic;
using Stump.DofusProtocol.Enums;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Game.Maps;
using Stump.Server.WorldServer.Game.Maps.Cells;
using Stump.Core.IO;
using Stump.Server.WorldServer.Game.Actors.RolePlay.Monsters;
using System.Linq;

namespace Stump.Server.WorldServer.Database.Monsters
{
    public class MonsterDungeonSpawnRelator
    {
        //public static string FetchQuery = "SELECT * FROM monsters_spawns_dungeons " +
        //                                  "LEFT JOIN monsters_spawns_dungeons_groups ON monsters_spawns_dungeons_groups.DungeonSpawnId = monsters_spawns_dungeons.Id " +
        //                                  "LEFT JOIN monsters_grades ON monsters_grades.Id = monsters_spawns_dungeons_groups.MonsterGradeId";
        public static string FetchQuery = "SELECT * FROM monsters_spawns_dungeons INNER JOIN monsters_spawns_dungeons_groups ON monsters_spawns_dungeons_groups.DungeonSpawnId = monsters_spawns_dungeons.Id";

        private MonsterDungeonSpawn m_current;

        public MonsterDungeonSpawn Map(MonsterDungeonSpawn spawn, MonsterDungeonSpawnEntity entity)
        {
            MonsterDungeonSpawn result;
            if (spawn == null)
            {
                result = this.m_current;
            }
            else
            {
                if (this.m_current != null && this.m_current.Id == spawn.Id)
                {
                    this.m_current.GroupMonsters.Add(entity);
                    result = null;
                }
                else
                {
                    MonsterDungeonSpawn current = m_current;
                    this.m_current = spawn;
                    this.m_current.GroupMonsters.Add(entity);
                    result = current;
                }
            }
            return result;
        }
    }


    /// <summary>
    /// Only used for many to many relation
    /// </summary>
    [TableName("monsters_spawns_dungeons_groups")]
    public class MonsterDungeonSpawnEntity : IAutoGeneratedRecord
    {
        private string m_possibleMonsterGradeIdsCSV;
        private uint[] m_possibleMonsterGradeIds;
        public MonsterDungeonSpawnEntity()
        {
            
        }

        public MonsterDungeonSpawnEntity(MonsterDungeonSpawn group, List<MonsterGrade> grade, int? minPartyMembers = null)
        {
            DungeonSpawnId = group.Id;
            PossibleMonsterGrades = grade;
            MinPartyMembers = minPartyMembers;
        }

        [PrimaryKey("Id")]
        public int Id
        {
            get;
            set;
        }

        [Index]
        public int DungeonSpawnId
        {
            get;
            set;
        }

        public int MonsterId
        {
            get;
            set;
        }
        public string PossibleMonsterGradeIdsCSV
        {
            get
            {
                return this.m_possibleMonsterGradeIdsCSV;
            }
            set
            {
                this.m_possibleMonsterGradeIdsCSV = value;
                this.m_possibleMonsterGradeIds = this.m_possibleMonsterGradeIdsCSV.FromCSV<uint>(",");
            }
        }
        [Ignore]
        public uint[] PossibleMonsterGradeIds
        {
            get
            {
                return this.m_possibleMonsterGradeIds;
            }
            set
            {
                this.m_possibleMonsterGradeIds = value;
                this.m_possibleMonsterGradeIdsCSV = this.m_possibleMonsterGradeIds.ToCSV(",");
            }
        }
        [Ignore]
        public List<MonsterGrade> PossibleMonsterGrades
        {
            get
            {
                return PossibleMonsterGradeIds.Select(x => MonsterManager.Instance.GetMonsterGrade(MonsterId, (int)x)).ToList();
            }
            set
            {
                PossibleMonsterGradeIds = value.Select(x => x.GradeId).ToArray();
            }
        }

        public int? MinPartyMembers
        {
            get;
            set;
        }
    }

    [TableName("monsters_spawns_dungeons")]
    public class MonsterDungeonSpawn : IAutoGeneratedRecord
    {
        public MonsterDungeonSpawn()
        {
            GroupMonsters = new List<MonsterDungeonSpawnEntity>();
        }

        private Map m_map;
        private Map m_teleportMap;

        [PrimaryKey("Id")]
        public int Id
        {
            get;
            set;
        }

        public int MapId
        {
            get;
            set;
        }

        [Ignore]
        public Map Map
        {
            get { return m_map ?? (m_map = Game.World.Instance.GetMap(MapId)); }
            set
            {
                m_map = value;
                MapId = value.Id;
            }
        }

        public int? CellId
        {
            get;
            set;
        }

        [Ignore]
        public List<MonsterDungeonSpawnEntity> GroupMonsters
        {
            get;
            set;
        }

        public bool TeleportEvent
        {
            get;
            set;
        }

        public int TeleportMapId
        {
            get;
            set;
        }

        [Ignore]
        public Map TeleportMap
        {
            get { return m_teleportMap ?? (m_teleportMap = Game.World.Instance.GetMap(TeleportMapId)); }
            set
            {
                m_teleportMap = value;
                TeleportMapId = value.Id;
            }
        }

        public short TeleportCell
        {
            get;
            set;
        }

        public DirectionsEnum TeleportDirection
        {
            get;
            set;
        }

        public ObjectPosition GetTeleportPosition()
        {
            return !TeleportEvent ? null : new ObjectPosition(TeleportMap, TeleportCell, TeleportDirection);
        }
    }
}