using System.Collections.Generic;
using Stump.Core.Extensions;
using Stump.Core.IO;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Game.Actors.RolePlay.Monsters;

namespace Stump.Server.WorldServer.Database.Monsters {
    [TableName("monsters_spawns_dungeons_groups")]
    public class MonsterDungeonSpawnEntity : IAutoGeneratedRecord {
        private uint[] m_possibleMonsterGradeIds;
        // FIELDS
        private string m_possibleMonsterGradeIdsCSV;

        // CONSTRUCTORS
        public MonsterDungeonSpawnEntity() {
            PossibleMonsterGrades = new List<MonsterGrade>();
        }

        // PROPERTIES
        [PrimaryKey("Id", true)]
        public int Id { get; set; }

        public int DungeonSpawnId { get; set; }

        public int MonsterId { get; set; }

        public string PossibleMonsterGradeIdsCSV {
            get { return m_possibleMonsterGradeIdsCSV; }
            set {
                m_possibleMonsterGradeIdsCSV = value;
                m_possibleMonsterGradeIds = m_possibleMonsterGradeIdsCSV.FromCSV<uint>(",");
            }
        }

        [Ignore]
        public uint[] PossibleMonsterGradeIds {
            get { return m_possibleMonsterGradeIds; }
            set {
                m_possibleMonsterGradeIds = value;
                m_possibleMonsterGradeIdsCSV = m_possibleMonsterGradeIds.ToCSV(",");
            }
        }

        [Ignore]
        public List<MonsterGrade> PossibleMonsterGrades { get; set; }

        // METHODS
        internal Monster GenerateMonster(ref MonsterGroup group) {
            var grade = PossibleMonsterGrades.RandomElementOrDefault();
            if (grade != null)
                return new Monster(grade, group);
            return null;
        }
    }
}