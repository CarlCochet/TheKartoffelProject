using WorldEditor.Loaders.Classes;
using WorldEditor.Loaders.Data;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using System;
using System.Collections.Generic;
using System.Linq;
using WorldEditor.Helpers.IO;
using WorldEditor.Loaders.I18N;

namespace WorldEditor.Loaders.Objetcs
{
    [D2OClass("Item", "com.ankamagames.dofus.datacenter.items", true), TableName("items_templates")]
    public class ItemTemplate : IAutoGeneratedRecord, IObject
    {
        public const uint EquipementCategory = 0;
        public const uint ConsumablesCategory = 1;
        public const uint RessourcesCategory = 2;
        public const uint QuestCategory = 3;
        public const uint OtherCategory = 4;

        [PrimaryKey("Id")]
        public int Id { get; set; }

        public uint Weight { get; set; }

        public uint RealWeight { get; set; }

        [I18NField]
        public uint NameId { get; set; }

        public uint TypeId { get; set; }

        public uint DescriptionId { get; set; }

        public int IconId { get; set; }

        public uint Level { get; set; }

        public bool Cursed { get; set; }

        public int UseAnimationId { get; set; }

        public bool Usable { get; set; }

        public bool Targetable { get; set; }

        public double Price { get; set; }

        public bool TwoHanded { get; set; }

        public bool Etheral { get; set; }

        public int ItemSetId { get; set; }

        [NullString]
        public string Criteria { get; set; }

        [NullString]
        public string CriteriaTarget { get; set; }

        public bool HideEffects { get; set; }

        public uint AppearanceId { get; set; }

        public string RecipeIdsCSV
        {
            get { return RecipeIds.ToCSV(","); }
            set { RecipeIds = value.FromCSV<uint>(","); }
        }

        public string FavoriteSubAreasCSV
        {
            get { return FavoriteSubAreas.ToCSV(","); }
            set { FavoriteSubAreas = value.FromCSV<uint>(","); }
        }

        public bool BonusIsSecret { get; set; }

        public uint FavoriteSubAreasBonus { get; set; }

        public bool IsLinkedToOwner { get; set; }

        public byte[] PossibleEffectsBin
        {
            get { return PossibleEffects.ToBinary(); }
            set 
            {
                PossibleEffects = value.ToObject<List<EffectInstance>>(); 
            }
        }

        [Ignore]
        public uint[] RecipeIds { get; set; }

        [Ignore]
        public uint[] FavoriteSubAreas { get; set; }

        [Ignore]
        public List<EffectInstance> PossibleEffects { get; set; }

        [Ignore]
        public string Name
        {
            get { return I18NDataManager.Instance.ReadText(NameId); }
        }

        public ItemTemplate()
        {
            PossibleEffects = new List<EffectInstance>();
            RecipeIds = new uint[0];
            FavoriteSubAreas = new uint[0];
        }

        public bool IsWeapon()
        {
            return this is WeaponTemplate;
        }

        public override string ToString()
        {
            return string.Format("{0} ({1})", I18NDataManager.Instance.ReadText(NameId), Id);
        }

        public object GetD2oClass(object baseObj)
        {
            var result = new Item();
            var item = baseObj as Item;

            result.id = this.Id;
            result.nameId = this.NameId;
            result.typeId = this.TypeId;
            result.descriptionId = this.DescriptionId;
            result.iconId = this.IconId;
            result.level = this.Level;
            result.realWeight = this.RealWeight;
            result.cursed = this.Cursed;
            result.useAnimationId = this.UseAnimationId;
            result.usable = this.Usable;
            result.targetable = this.Targetable;
            if (item != null)
            {
                result.exchangeable = item.exchangeable;
            }
            else
            {
                result.exchangeable = true;
            }
            result.price = (float)this.Price;
            result.twoHanded = this.TwoHanded;
            result.etheral = this.Etheral;
            result.itemSetId = this.ItemSetId;
            result.criteria = this.Criteria;
            result.criteriaTarget = this.CriteriaTarget;
            result.hideEffects = this.HideEffects;
            if (item != null)
            {
                result.enhanceable = item.enhanceable;
            }
            else
            {
                result.enhanceable = true;
            }

            if (item != null)
            {
                result.nonUsableOnAnother = item.nonUsableOnAnother;
            }
            else
            {
                result.nonUsableOnAnother = true;
            }

            //result.appearanceId = this.AppearanceId;

            if (item != null)
            {
                result.secretRecipe = item.secretRecipe;
            }
            else
            {
                result.secretRecipe = true;
            }

            if (item != null)
            {
                result.dropMonsterIds = item.dropMonsterIds;
            }
            else
            {
                result.dropMonsterIds = new List<uint>();
            }

            if (item != null)
            {
                result.recipeSlots = item.recipeSlots;
            }
            else
            {
                result.recipeSlots = 0;
            }
            result.recipeIds = this.RecipeIds.ToList();
            result.bonusIsSecret = this.BonusIsSecret;
            result.possibleEffects = this.PossibleEffects;
            result.favoriteSubAreas = this.FavoriteSubAreas.ToList();
            result.favoriteSubAreasBonus = this.FavoriteSubAreasBonus;
            result.weight = this.Weight;

            return result;
        }
    }

    public class ItemTemplateRelator
    {
        public static string FetchQuery = "SELECT * FROM items_templates";
        public static string FetchById = "SELECT * FROM items_templates WHERE Id = @0";
        public static string FetchByTypeId = "SELECT * FROM items_templates WHERE TypeId = @0";
    }
}
